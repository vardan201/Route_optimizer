import osmnx as ox
# Download road network for a city
G = ox.graph_from_place("New York City, USA", network_type="drive")

# Convert the graph to GeoDataFrames
nodes, edges = ox.graph_to_gdfs(G)
# View the edges (roads) data
print(edges.head())
print(nodes.head())
edges.to_csv("road_edges.csv", index=False)
# Save nodes (intersections) to a CSV file
nodes.to_csv("road_nodes.csv", index=False)
import pandas as pd
nodes=pd.read_csv('road_nodes.csv')
nodes.shape
nodes.isnull().sum()

nodes.drop(columns=['highway', 'ref', 'street_count', 'junction', 'railway', 'geometry'], inplace=True)
import matplotlib.pyplot as plt
import seaborn as sns 
plt.figure(figsize=(10, 6))
plt.scatter(nodes['x'], nodes['y'], s=1, alpha=0.5)
plt.title('Geospatial Distribution (No Outliers)')
plt.xlabel('Longitude (x)')
plt.ylabel('Latitude (y)')
plt.show()
print(nodes.corr())
sns.heatmap(nodes.corr(), annot=True, cmap='coolwarm')
from sklearn.preprocessing import StandardScaler, MinMaxScaler
minmax_scaler = MinMaxScaler()
scaled_data = minmax_scaler.fit_transform(nodes)
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

distortions = []
for k in range(2, 10):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(scaled_data)
    distortions.append(kmeans.inertia_)  # Sum of squared distances

plt.plot(range(2, 10), distortions, marker='o')
plt.xlabel('Number of Clusters')
plt.ylabel('Distortion')
plt.title('Elbow Method')
plt.show()

from sklearn.cluster import KMeans

# Create and fit the KMeans model
kmeans = KMeans(n_clusters=4, random_state=42)  # Set the number of clusters
clusters = kmeans.fit_predict(scaled_data)      # Fit the model and predict cluster labels

# Assign cluster labels back to the dataset
nodes['cluster'] = clusters


import matplotlib.pyplot as plt
import numpy as np

# Assuming 'scaled_data' contains the features (latitude, longitude) 
# and 'nodes['cluster']' contains the cluster labels assigned by DBSCAN or any other algorithm

plt.figure(figsize=(10, 8))

# Scatter plot, coloring points based on their cluster labels
plt.scatter(scaled_data[:, 1], scaled_data[:, 0], c=nodes['cluster'], cmap='viridis', marker='o')

# Add title and axis labels
plt.title('Clustering Visualization')
plt.xlabel('Latitude')
plt.ylabel('Longitude')

# Calculate cluster centroids and label regions
unique_clusters = np.unique(nodes['cluster'])  # Get unique cluster labels
region_labels = ['Region A', 'Region B', 'Region C', 'Region D']  # Customize as needed

for i, cluster in enumerate(unique_clusters):
    if cluster == -1:  # Skip noise points (optional, for DBSCAN)
        continue
    cluster_points = scaled_data[nodes['cluster'] == cluster]  # Points in the current cluster
    centroid = cluster_points.mean(axis=0)  # Calculate centroid
    # Add text at the centroid
    plt.text(centroid[1], centroid[0], region_labels[i], fontsize=12, fontweight='bold', color='red', 
             ha='center', va='center', bbox=dict(facecolor='white', alpha=0.7))

# Show color bar to indicate different clusters
plt.colorbar(label='Cluster')

# Show the plot
plt.show()

from sklearn.metrics import silhouette_score

silhouette_avg = silhouette_score(scaled_data, kmeans.labels_)
print("Silhouette Score:", silhouette_avg)
edges=pd.read_csv('road_edges.csv')
edges['cleaned'] = edges['geometry'].str.replace(r'LINESTRING \(|\)', '', regex=True)

# Step 2: Split by commas and strip extra spaces from each coordinate
split_values = edges['cleaned'].str.split(',').apply(lambda x: [i.strip() for i in x])  # Strip each element

# Step 3: Extract the first and last coordinates
edges['source'] = split_values.apply(lambda x: x[0])  # First coordinate (source)
edges['target'] = split_values.apply(lambda x: x[-1]) 
edges.drop(columns=['width', 'ref', 'tunnel', 'access', 'bridge', 'geometry','junction','est_width','cleaned','name','maxspeed','highway'], inplace=True)
edges.drop(columns=['lanes'],inplace=True)
edges['length'] = edges['length'].astype(float)

# Duplicate edges for two-way streets
two_way_edges = edges[edges['oneway'] == False]
two_way_edges['reversed'] = True  # Mark as reversed for clarity
edges = pd.concat([edges, two_way_edges], ignore_index=True)

edges.drop(columns=['oneway','reversed','osmid'],inplace=True)
edges[['longitude_source', 'latitude_source']] = edges['source'].str.split(' ', expand=True)

# Convert columns to float for numeric processing
edges['longitude_source'] = edges['longitude_source'].astype(float)
edges['latitude_source'] = edges['latitude_source'].astype(float)
edges[['longitude_target', 'latitude_target']] = edges['target'].str.split(' ', expand=True)

# Convert columns to float for numeric processing
edges['longitude_target'] = edges['longitude_target'].astype(float)
edges['latitude_target'] = edges['latitude_target'].astype(float)
edges.drop(columns=['source','target'],inplace=True)
import pandas as pd
import networkx as nx
import osmnx as ox
import networkx as nx
from osmnx.distance import nearest_nodes
import pandas as pd
G = nx.Graph()
for idx, row in nodes.iterrows():
    G.add_node(idx, x=row['x'], y=row['y'], cluster=row['cluster'])

# Create a lookup dictionary to map coordinates to node IDs
node_lookup = {(row['x'], row['y']): idx for idx, row in nodes.iterrows()}
if "crs" not in G.graph:
    G.graph["crs"] = "epsg:4326"

edges['source_node'] = edges.apply(lambda row: node_lookup.get((row['longitude_source'], row['latitude_source'])), axis=1)
edges['target_node'] = edges.apply(lambda row: node_lookup.get((row['longitude_target'], row['latitude_target'])), axis=1)


edges.dropna(subset=['source_node', 'target_node'], inplace=True)

# Add edges to the graph
for _, row in edges.iterrows():
    G.add_edge(row['source_node'], row['target_node'], weight=row['length'])
is_connected = nx.is_connected(G)
print("Is the graph connected?", is_connected)
def find_shortest_path(G, source_node, target_node):
    # Find the shortest path using Dijkstra's algorithm
    shortest_path = nx.shortest_path(G, source=source_node, target=target_node, weight='length')
    # Calculate the total path length
    path_length = nx.shortest_path_length(G, source=source_node, target=target_node, weight='length')
    return shortest_path, path_length
def get_nearest_node(G, lat, lon):
    return nearest_nodes(G, X=lon, Y=lat)
source_lat, source_lon = 40.748817, -73.985428  # Example source: Empire State Building
target_lat, target_lon = 40.730610, -73.935242  # Example target: Brooklyn

# Find nearest nodes for source and target coordinates
source_node = get_nearest_node(G, source_lat, source_lon)
target_node = get_nearest_node(G, target_lat, target_lon)

# Find the shortest path
shortest_path, path_length = find_shortest_path(G, source_node, target_node)

# Output the results
print(f"Shortest path: {shortest_path}")
print(f"Path length: {path_length}")
import folium
m = folium.Map(location=[(source_lat + target_lat) / 2, (source_lon + target_lon) / 2], zoom_start=12)

# Add shortest path to map
if shortest_path is not None:
    for i in range(len(shortest_path) - 1):
        src = shortest_path[i]
        tgt = shortest_path[i + 1]
        src_coords = (nodes.loc[src, 'y'], nodes.loc[src, 'x'])
        tgt_coords = (nodes.loc[tgt, 'y'], nodes.loc[tgt, 'x'])
        folium.PolyLine([src_coords, tgt_coords], color='blue', weight=2.5, opacity=0.8).add_to(m)

# Save the map
m.save("shortest_path_map.html")
print("Map saved as shortest_path_map.html")

# Display the map
m
from geopy.distance import geodesic

# Function to calculate the distance between two points (latitude, longitude)
def calculate_distance(coord1, coord2):
    return geodesic(coord1, coord2).meters  # Return distance in meters

# Coordinates of source and target
source_coords = (40.748817, -73.985428)  # Empire State Building
target_coords = (40.730610, -73.935242)  # Target location

# Initialize total path length
total_path_length = 0

# Iterate through the nodes in the shortest path and calculate the distance
for i in range(1, len(shortest_path)):
    start_node = shortest_path[i-1]
    end_node = shortest_path[i]
    
    # Get coordinates for the start and end nodes
    start_coords = (nodes.loc[start_node, 'y'], nodes.loc[start_node, 'x'])
    end_coords = (nodes.loc[end_node, 'y'], nodes.loc[end_node, 'x'])
    
    # Add the distance between the nodes to the total path length
    total_path_length += calculate_distance(start_coords, end_coords)

# Print the total path length
print(f"Total road path length: {total_path_length:.2f} meters")


